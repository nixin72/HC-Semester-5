@model pdumaresq_C50_A03.Models.Item

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        <div>
            <h2>Create New</h2>
        </div>        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control", @id = "ItemName" } })
                @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger" })
                <div id="ItemNameError" class="text-danger"></div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ItemCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(x => x.ItemCategory, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ItemCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ItemQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ItemQuantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemQuantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ItemPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ItemPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<script>
    document.querySelector("form").addEventListener("submit", e => {
        let nameExists = false;
        $.ajax({
            url: "/ShoppingList/Details", dataType: "json",
            type: "POST", data: { name: document.querySelector('#ItemName').value },
            async: false
        })
            .done(data => { nameExists = data == null ? false : data["ItemName"]; })
            .fail(err =>  { nameExists = false;        });

        if (nameExists) {
            document.querySelector('#ItemNameError').innerText = "There is already an item in your list named " + nameExists;
            e.preventDefault();
        }
    });
</script>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
